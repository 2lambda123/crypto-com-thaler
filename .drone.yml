---
kind: pipeline
name: default

platform:
  os: linux
  arch: amd64

steps:
- name: build
  image: cryptocom/chain-test:v1.1.1
  pull: if-not-exists
  commands:
  - export CARGO_HOME=$PWD/drone/cargo
  - export CARGO_TARGET_DIR=$PWD/drone/target
  - ./docker/build.sh

- name: unit-tests
  image: cryptocom/chain-test:v1.1.1
  pull: if-not-exists
  commands:
  - export CARGO_HOME=$PWD/drone/cargo
  - export CARGO_TARGET_DIR=$PWD/drone/target
  - cargo test

- name: integration-tests
  image: cryptocom/chain-test:v1.1.1
  pull: if-not-exists
  privileged: true
  volumes:
  - name: sgx
    path: /dev/sgx
  environment:
    SPID:
      from_secret: SPID
    IAS_API_KEY:
      from_secret: IAS_API_KEY
  commands:
  - export CARGO_TARGET_DIR=$PWD/drone/target
  - export PYTHON_VENV_DIR=$PWD/drone/venv
  - LD_LIBRARY_PATH=/opt/intel/sgx-aesm-service/aesm /opt/intel/sgx-aesm-service/aesm/aesm_service
  - ./integration-tests/run.sh

- name: multinode-tests
  image: cryptocom/chain-test:v1.1.1
  pull: if-not-exists
  privileged: true
  volumes:
  - name: sgx
    path: /dev/sgx
  environment:
    SPID:
      from_secret: SPID
    IAS_API_KEY:
      from_secret: IAS_API_KEY
  commands:
  - export CARGO_TARGET_DIR=$PWD/drone/target
  - export PYTHON_VENV_DIR=$PWD/drone/venv
  - LD_LIBRARY_PATH=/opt/intel/sgx-aesm-service/aesm /opt/intel/sgx-aesm-service/aesm/aesm_service
  - ./integration-tests/run_multinode.sh

- name: sgx-test
  image: cryptocom/chain-test:v1.1.1
  pull: if-not-exists
  privileged: true
  volumes:
  - name: sgx
    path: /dev/sgx
  environment:
    SGX_TEST: 1
    RUST_LOG: debug
  commands:
  - export CARGO_HOME=$PWD/drone/cargo
  - export CARGO_TARGET_DIR=/tmp
  - LD_LIBRARY_PATH=/opt/intel/sgx-aesm-service/aesm /opt/intel/sgx-aesm-service/aesm/aesm_service
  - make -C chain-tx-enclave/tx-validation
  - cargo build --features sgx-test --manifest-path chain-abci/Cargo.toml
  - cd $CARGO_TARGET_DIR/debug
  - ./chain-abci

- name: teardown
  image: cryptocom/chain-test:v1.1.1
  pull: if-not-exists
  commands:
  - ./integration-tests/cleanup.sh
  when:
    status:
      - success
      - failure

volumes:
  - name: sgx
    host:
      path: /dev/sgx

trigger:
  branch:
  - master
  - staging
  - trying
  event:
  - push

---
kind: pipeline
name: fuzzer

platform:
  os: linux
  arch: amd64

steps:
- name: build
  image: cryptocom/fuzzer:latest
  pull: if-not-exists
  environment:
    FUZZIT_API_KEY:
      from_secret: FUZZIT_API_KEY
  commands:
  - ./ci-scripts/fuzzit.sh

trigger:
  branch:
  - master
  event:
  - push
      

---
kind: signature
hmac: 8bda37c0da85ed0791136135e4e5900e56c31b94bb8e6b16f37a8e08a4f8511e

...
