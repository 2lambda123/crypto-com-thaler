use rustls::internal::msgs::codec::Codec;

use mls::{
    keypackage::{Error, DEFAULT_LIFE_TIME},
    KeyPackage,
};
use ra_client::ENCLAVE_CERT_VERIFIER;

#[test]
fn verify_keypackage_test_vector_mock() {
    // keypackage_mock.bin is generated by golang implementation
    static VECTOR: &[u8] = include_bytes!("test_vectors/keypackage_mock.bin");
    let kp = <KeyPackage>::read_bytes(VECTOR).expect("decode");
    assert!(matches!(
        kp.verify(&*ENCLAVE_CERT_VERIFIER, 0),
        Err(Error::InvalidCredential)
    ));
}

#[test]
fn verify_keypackage_test_vector() {
    static VECTOR: &[u8] = include_bytes!("test_vectors/keypackage.bin");

    let kp = <KeyPackage>::read_bytes(VECTOR).expect("decode");
    let now = 1594955685;
    let expire = now + DEFAULT_LIFE_TIME;
    kp.verify(&*ENCLAVE_CERT_VERIFIER, now).unwrap();
    assert!(matches!(
        kp.verify(&*ENCLAVE_CERT_VERIFIER, expire + 1),
        Err(Error::NotAfter(_))
    ));
}
