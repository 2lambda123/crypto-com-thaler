use rustls::internal::msgs::codec::Codec;

use mls::{
    keypackage::{Error, DEFAULT_LIFE_TIME},
    KeyPackage,
};
use ra_client::{EnclaveCertVerifier, EnclaveCertVerifierConfig};

#[test]
fn verify_keypackage_test_vector_mock() {
    // keypackage_mock.bin is generated by golang implementation
    static VECTOR: &[u8] = include_bytes!("test_vectors/keypackage_mock.bin");
    let kp = <KeyPackage>::read_bytes(VECTOR).expect("decode");
    let verifier = EnclaveCertVerifier::new(Default::default()).unwrap();
    assert!(matches!(
        kp.verify(&verifier, 0),
        Err(Error::InvalidCredential)
    ));
}

#[test]
fn verify_keypackage_test_vector() {
    static VECTOR: &[u8] = include_bytes!("test_vectors/keypackage.bin");

    let kp = <KeyPackage>::read_bytes(VECTOR).expect("decode");
    let verifier = EnclaveCertVerifier::new(EnclaveCertVerifierConfig {
        // FIXME GROUP_OUT_OF_DATE is not valid status
        valid_enclave_quote_statuses: vec!["OK".into(), "GROUP_OUT_OF_DATE".into()].into(),
        ..Default::default()
    })
    .unwrap();
    let now = 1590042554;
    let expire = now + DEFAULT_LIFE_TIME;
    kp.verify(&verifier, now).unwrap();
    assert!(matches!(
        kp.verify(&verifier, expire + 1),
        Err(Error::NotAfter(_))
    ));
}
